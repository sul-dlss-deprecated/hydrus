= Hydrus

== Overview

A Hydra application enabling deposit of digital objects into the Stanford
Digital Repository for preservation and access.


== Dependencies on non-public code

* Stanford's dor-services gem.
* Stanford's sul-chrome gem.
* Dor certificates for client authentication.


== Setting up your environment

  rvm install 1.9.3

  brew install exiftool

  git clone git@github.com:sul-dlss/hydrus.git

  cd hydrus

  cp ./.rvmrc{.example,}
  cp ./deploy/.rvmrc{.example,}

  git submodule update --init

  bundle install

  rake hydra:jetty:config
  rake hydrus:config

  # Edit config/*.yml files, adding passwords, etc.

  rake jetty:start

  rake db:migrate
  rake db:test:prepare
  rake db:migrate RAILS_ENV=test

  rake hydrus:refreshfix
  rake hydrus:refreshfix RAILS_ENV=test
  rake hydrus:refresh_upload_files

== Ubuntu Packages

If installing on Ubuntu, start with the following:

  sudo apt-get install mysql-server curl wget gawk g++ libreadline6-dev zlib1g-dev libssl-dev libyaml-dev \
    libsqlite3-dev sqlite3 autoconf libgdbm-dev libncurses5-dev automake libtool bison libffi-dev build-essential \
    libxml2 libxml2-dev libxslt libxslt-dev

  # install Oracle java
  sudo add-apt-repository ppa:webupd8team/java
  sudo apt-get update
  sudo apt-get install oracle-java8-installer

  gem update debugger-ruby_core_source

== Running the application

Start the Jetty server:

  rake jetty:start

Run the Hydrus application in either of these ways:

  rails server
  rake  server   # Filters some of the logging noise.


== Useful URLs during development

=== Hydrus

* http://localhost:3000
* http://localhost:3000/about

=== Jetty server, Fedora, and SOLR

* http://localhost:8983
* http://localhost:8983/fedora/admin
* http://localhost:8983/fedora/objects
* http://localhost:8983/solr

== User accounts used during development

Default user:

  username: archivist1@example.com
  password: beatcal

Federa admin user:

  username: fedoraAdmin
  password: fedoraAdmin

Also see:

  app/models/hydrus/authorizable.rb
  test/fixtures/users.yml


== Running tests

  # Run unit tests, integration tests, or everything.
  rake unit_tests
  rake integration_tests
  rake local_ci

  # Run test suite using a different Jetty port, so you can keep working.
  rake ci_alt

  # Coverage reports -- two flavors.
  open coverage/rcov/index.html
  open coverage/index.html


== Deployment

  # Run this script without arguments to view instructions.
  devel/deploy_hydus.rb

  # Run remediations the objects in the deployed environment require
  # changes to be consistent with the new code.

  1. Shut down the application.
  2. Run remediations: see section below.
  3. Start the application.

== Remediations

  # The general framework, and the front-end.
  # See the code for more details on how the process works.
  app/models/hydrus/remediation_runner.rb
  remediations/run.rb

  # Remediation scripts:
  - Stored in the remediations subdirectory.
  - Naming following the application version naming convention:
      2013.02.25a.rb
      2013.02.27a.rb
      2013.02.27b.rb
      etc.
  - See remediations/archive/0000.00.00a.rb for a schematic example.
  - After remediations are run on all deployed environments, they
    typically won't be needed in the future, so they can be moved
    in the Git repo into the remediations/archive directory.

  # Running remediations (using dortest environment as the example):
  # Must run from the deployed box.
  RAILS_ENV=dortest bundle exec rails runner remediations/run.rb

  # Then search for problems.
  grep -i warn log/remediation.log

== Useful commands

  # List the Hydrus rake tasks.
  rake -T hydrus

  # Some handy scripts during development.
  rails runner devel/create_test_item.rb help
  rails runner script/experiment.rb         # See comments in script.
  rails runner devel/get_datastreams.rb
  rails runner devel/list_all_hydrus_objects.rb

== Misc

If you see an error relating to generate_intial_workflow() for nil:NilClass, run this:

  rake hydrus:reindex_workflow_objects

If you want to enable or disable login via email address and password (as opposed to webauth),
look at the appropriate environment file in config/environments/
Set the config parameter "show_standard_login" to either true or false.

== Starting Jetty on deployment servers

  # Run this from the jetty directory.
  # Note that dortest and production don't rely on Jetty.
  nohup java -Djetty.port=8983 \
             -Dsolr.solr.home=/home/lyberadmin/hydrus/shared/jetty/solr \
             -XX:MaxPermSize=128m -Xmx256m -jar start.jar \
             > logs/`date +%Y_%m_%d`.request.log 2>&1 <&- &


== Terms of deposit text

If you update the text, you should change the following:

  # Headings.
  app/views/hydrus_items/terms_of_deposit.html.erb
  app/views/hydrus_items/_terms_of_deposit_popup.html.erb

  # Text and headings.
  app/views/hydrus_items/_terms_of_deposit_text.html.erb
  doc/SDRSelfDepositTerms.doc
  public/SDRSelfDepositTerms.pdf


== Workflow steps and object_status

General points:

- The Hydrus application advances an object through the steps of the hydrusAssemblyWF.
  However, the application does not consult the hydrusAssemblyWF for information.

- Instead, the application consults hydrusProperty for all information related to
  the status of an object and its flow through the steps in the Hydrus deposit
  process.

- Because they have somewhat different purposes, the hydrusAssemblyWF steps and
  the Hydrus object_status values do not have a one-to-one correspondence.

- Whereas a workflow is designed to move only in the forward direction as various
  steps are accomplished, Hydrus object_status can toggle back and forth between
  various states during the edit-and-review and collection-open-and-close processes.

- Hydrus does consult the workflow service when it needs information about the
  status of an object in assemblyWF and accessionWF. The primary examples are in
  the is_accessioned() and publish_time() methods.

Relationship between object_status and workflow steps for collections:

  object_status              workflow steps
  ----------------------------------------------------
  draft                      start-deposit

  published_open             submit --> approve --> start-assembly

  published_closed           start-assembly
  ----------------------------------------------------

  Notes:

  - The first time a collection is opened, it automatically advances through a
    few workflow steps.

  - After that, the collection manager can toggle the collection between open
    and closed states, but the collection cannot be unpublished and the
    workflow steps do not move backward.

  - Typically the application is configured not to start assembly in local
    development mode. Thus the object remains as the "approve' workflow step
    rather than "start-assembly".

Relationship between object_status and workflow steps for items:

  Items not requiring human approval:

  object_status              workflow steps
  ----------------------------------------------------
  draft                      start-deposit
  published                  submit --> approve --> start-assembly
  ----------------------------------------------------

  Items requiring human approval:

  object_status              workflow steps
  ----------------------------------------------------
  draft                      start-deposit
  awaiting_approval          submit
  returned                   submit
  published                  approve --> start-assembly
  ----------------------------------------------------

  Notes:

  - Items can toggle back and forth between awaiting_approval and returned
    during the edit-and-review process. During that time, the workflow remains
    at the submit step.


== Updating hydra-jetty submodule to a different version

  # Make sure your git status is clean.
  git status

  # Make a backup of the hydrus dir. Include the trailing slash.
  mkdir       ../backup_hydrus
  rsync -a ./ ../backup_hydrus

  # Restore jetty directory to its initial state.
  cd jetty
  git reset --hard HEAD
  git clean -dfx
  git status

  # Checkout the commit you want to use.
  git fetch
  git checkout SHA1

  # Back in the main hydrus projet, commit the submodule change.
  cd ..
  git status                           # Indicates jetty has changed.
  git commit -am 'Updated hydra-jetty'

  # Confirm that everything looks good.
  git status
  git submodule status

  # Initialize the contents of jetty, etc.
  rake hydrus:jetty_nuke
  etc.

  # If you do this work on the develop branch, you need to merge
  # to master. Otherwise, you won't be able to set up the code on
  # a new box, and tests won't run correctly on the master branch.

  # Reset jetty directory on jenkinsqa.stanford.edu.
  ssh jenkinsqa@jenkinsqa.stanford.edu
  cd /jenkins/jobs/Hydrus-develop/workspace/jetty
  git reset --hard HEAD
  git clean -dfx
  cd /jenkins/jobs/Hydrus/workspace/jetty
  git reset --hard HEAD
  git clean -dfx

== Creating a Hydrus Item with a particular PID

  # Temporarily edit register_dor_object().
  params[:pid] = 'ITEM_PID' if args.last == 'APO_PID'

  # Run this in the Rails console.
  bundle exec rails c ENV
  hc = Hydrus::Collection.find 'COLL_PID'
  u  = User.new(:email => 'EMAIL')
  hi = Hydrus::Item.create(hc.pid, u)

== Manually Adding a File to an Existing Object

  1. Move the file(s) to the /data/hydrus-files/tmp folder on the hydrus-prod server using sftp or some other mechanism

  2. SSH into the hydrus-prod server, go to the app directory and start a console
  
    cd hydrus/current   
    bundle exec rails console production 

  3. Now from the Rails console add your file(s) to the object by creating new ObjectFile(s)

	hof = Hydrus::ObjectFile.new
	hof.pid='druid:XX111YY2222' # set this to the druid of the hydrus object
	hof.hide=false   # set this to true if the file should be hidden (defaults to false if not set)
	hof.label="Description" # optional description of file, can be left blank
	hof.file=File.open('/data/hydrus-files/tmp/YOURFILENAME')  # add your file here using the filename
	hof.save  # should true if it succeeded

  4. Repeat step 3 for any additional files

  5. Refresh the object page in hydrus to confirm the files are listed.  You can also double-check that the files were placed in the correct location, +/data/hydrus-files/DRUID/TREE/PATH/DRUID/content+
	e.g. +/data/hydrus-files/xx/111/yy/2222/xx111yy2222/content+

  6. Delete the files from the +/data/hydrus-files/tmp+ directory
