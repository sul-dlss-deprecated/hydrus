-----------------
APO-of-Collection
-----------------

Revs-prod APO:
  https://dor-prod.stanford.edu/fedora/objects/druid:qv648vd4392/datastreams

done by register_object():

  assign druid: ok

  identityMetadata:
    objectLabel: currently "Hydrus"; do we want something else?
        - when Coll is published, refresh the APO title, based on Coll title
        - title = "APO for #{coll.title}"

  RELS-EXT
    - created datastream
    - Hydrus app needs to add hydra:referencesAgreement:
       <rdf:Description rdf:about="info:fedora/druid:[apo-id]">
       <hydra:referencesAgreement rdf:resource="info:fedora/druid:mc322hh4254"/>

    - Hydrus app should add the hydra namespace if not already there:
        xmlns:hydra="http://projecthydra.org/ns/relations#"

  DC: ok

  descMetadata: not created
    - when Coll is published, refresh the APO title, based on Coll title
    - title = "APO for #{coll.title}"
    - Lynn will give us a spec

augmeted by Hydrus app:

  administrativeMetadata:
    created: ok
    default assembly workflow: not done (##mh)
      - workflow name = hydrusAssemblyWF
      - currently the steps are called:
          start-deposit
            - upon initial creation of the Coll
            - lifecycle = registered
          submit
            - when user clicks Publish
          approve
            - Reviewed (or could be autocompleted/skipped if Coll requires no approval)
          start-accession
            - triggered by last of the previous steps
    default common accessioning workflow: not done (##mh)

  roleMetadata: created, but <name> not set
    - need to get name from webauth or LDAP

  defaultObjectRights: not created
    - won't know until the Coll is published
    - create this stream when user clicks Publish for the Coll


----------
Collection
----------

done by register_object():

  assign druid: ok

  identityMetadata:
    objectType=collection: ok
    objectType=set: not done; need to do
    objectLabel:
      - currently "Hydrus"
      - when Coll is published, refresh the title, based on Coll title
    tag: currently is "Project : Hydrus"
    tag: also add this tag: "Hydrus : collection"

  workflows: ok

  RELS-EXT: ok

  DC: ok

  default hydrusAssemblyWF:
    will be handled by register_object() once we start putting workflows
    in the Hydrus APOs

augmeted by Hydrus app:

  descMetadata: ok

  events: not created (##mh)

  rightsMetadata: not created
    will be handled by register_object() once we start putting default rights
    in the Hydrus APOs


----
Item
----

done by register_object():

  assign druid: ok

  identityMetadata:
    objectType=item: ok
    objectLabel:
      - currently "Hydrus"
      - when Item is published, refresh the title, based on Item title
    tag: currently is "Project : Hydrus"
    tag: also add another tag: "hydrus : [itemtype]"
        - for now hard-code itemtype = dataset
        - need to figure out where this info will be stored in object

  RELS-EXT: ok

  DC: ok

  workflows:
    - should get workflow from APO, once we have that working

  default hydrusAssemblyWF
    will be handled by register_object() once we start putting workflows
    in the Hydrus APOs

augmeted by Hydrus app:

  descMetadata: ok

  events: not created (##mh)

  rightsMetadata: not created
    will be handled by register_object() once we start putting default rights
    in the Hydrus APOs

  roleMetadata: not created
    - Hydrus code needs to do this
    - tied to webauth


-------------------------
Assembly and accessioning
-------------------------

Where do Hydrus objects enter the larger DLSS pipeline: assembly or common-accessioning?
  - maybe assembly, but Peter and Monty will assess

  - checksums
  - contentMetadata

  - file transfer
  - robot errors
