h1. Hydrus

A Hydra application enabling deposit of digital objects into the Stanford
Digital Repository for preservation and access.

This code has dependencies on non-public code:
<ul>
<li>Stanford's dor-services gem</li>
<li>Stanford's sul-chrome gem </li>
</ul>

h2. Getting your environment setup:

	rvm install 1.9.3

  brew install exiftool

	git clone git@github.com:sul-dlss/hydrus.git
	cd hydrus

	bundle install

	git submodule init
	git submodule update

	rake hydra:jetty:config

	rake jetty:start

	rake db:migrate
	rake db:test:prepare
	rake db:migrate RAILS_ENV=test

	rake hydrus:loadfix
	rake hydrus:loadfix RAILS_ENV=test 
	
	rake hydrus:refresh_upload_files
	
h2. Starting the app

	rake jetty:start
	rails server
	
Or for a quieter output on the console:
	
	rake server

	Go to http://localhost:3000
	
	
h2. Default user

Note that you will need to be logged in to see any objects, since there is an
authentication and permissions system preventing read access to the default
fixtures.  Login with the following default user:

username: archivist1@example.com
password: beatcal
	
Collection manager SUNETids hardcoded into app/models/hydrus/authorizable.rb

h2. Developing

Recommended workflow:

0. Create a local working branch

 git branch working

1. Go to your local working branch

	git checkout working

	-- make changes --
	
	git add -A
	git commit -m 'i did lots of cool stuff'

2. Get updates from remote server and switch back to the develop branch

  git fetch
  git checkout develop

3a. If the git fetch pulled updates from the server, then:

 git merge origin/develop
 git checkout working
 git rebase develop
 git checkout develop
 git merge working
 git push origin develop

If you get a conflict on the push to origin (last line), you'll need to rebase
your local changes on top of the remote branch:

	git rebase origin/develop
	
And then repush:

	git push origin develop
	
Skip step 3b and go to 4
	
3b. If from step 2 the git fetch didn't pull any updates from the server, then:

 git merge working
 git push origin develop

You can use "gitx --all" at any time to see the history of each branch.
	
4. When you're ready to develop more code, go back to step 1.	You can use
multiple working branches if you are developing multiple features at once that
you don't want to mix together.  Just create a different local branch and
replace "working" above with your local branch name.

h2. Creating test items

You can create test collections and items quickly using a developer script.  For help using the script:

	rails runner devel/create_test_item.rb help

h2. Deploying

  cd deploy
  cap dev deploy # for http://hydrus-dev.stanford.edu
  cap dortest deploy # for http://hydrus-test.stanford.edu

Note that if you want to blanket change all passwords for default fixture users 
(useful for public facing websites), you can use a rake command for that environment.

RAILS_ENV=dortest rake hydrus:update_passwords['NEW_PASSWORD_HERE']

By default the dortest environment does not refresh users after each deploy, so this command
is only needed if you refresh fixtures.

You may also need to clear all objects out of the associated hydrus solr index if you are deleting
objects from Fedora (when in staging for example).  To do this, issue the following rake command
(but be careful!!)

RAILS_ENV=dortest rake hydrus:solr_nuke


h2. Useful commands

h3. Using Rails console:

	rails console
	
	rails console production # for production mode
	
h3. Dropping databases entirely:

	rake db:drop:all
	
Most of the rake commands are environment specific, so they can be run in test
environment by adding 'RAILS_ENV=test' to the end.

h3. Migrating databases to the latest version (which will also set them up if
they don't exist, assuming you are using sqllite):

	rake db:migrate

h3. Fixtures:

	rake hydrus:jetty_nuke   # kill jetty and reload it, will delete all objects (requires refreshfix when you are done)
	rake hydrus:refreshfix   # deletes and then reloads fixtures (most common)
	rake hydrus:loadfix      # loads fixtures (will fail if they exist)
	rake hydrus:deletefix    # deletes fixtures 
	rake hydrus:refresh_upload_files  # copy uploaded files associated with fixtures back into the public/uploads directory

h3. Tests:
	
	rake local_ci	   # run all tests and generates full coverage report (will shut down jetty, runs 'rake ci' task and then restart jetty)
	rake unit_tests  # just run rspec unit tests with coverage report for only those tests
	rake integration_tests # just run rspec integration test with coverage report for only those tests (this will take a while)

	open coverage/rcov/index.html  # check your test coverage (won't exist until tests run at least once)


h3. App URLs:

	http://localhost:3000
	
Local services provided by jetty, assuming it's running (most will have both a development and a test instance):

	http://localhost:8983/    # lists all services
	http://localhost:8983/fedora/admin/   # fedora admin   (username and password are "fedoraAdmin")
	http://localhost:8983/fedora/objects  # find fedora objects
	http://localhost:8983/solr/   # solr
	http://localhost:8983/solr/development/select/   # show all solr index information

Starting Jetty on the hydrus-dev or -test servers:

  # Note that the name of the log file will depend on the current date.
  # Run this from the jetty directory.
  nohup java -Djetty.port=8983 -Dsolr.solr.home=/home/lyberadmin/hydrus/shared/jetty/solr \
             -XX:MaxPermSize=128m -Xmx256m -jar start.jar                                 \
             > logs/2012_10_05.request.log 2>&1 <&- &

h2. Workflow steps and object_status

General points:

- The Hydrus application advances an object through the steps of the hydrusAssemblyWF.
  However, the application does not consult the hydrusAssemblyWF for information. The
  only exception is when checking whether the PURL page is ready.

- Instead, the application consults hydrusProperty for all information related to
  the status of an object and its flow through the steps in the Hydrus deposit
  process.

- Because they have somewhat different purposes, the hydrusAssemblyWF steps and
  the Hydrus object_status values do not have a one-to-one correspondence.

- Whereas a workflow is designed to move only in the forward direction as various
  steps are accomplished, Hydrus object_status can toggle back and forth between
  various states during the edit-and-review and collection-open-and-close processes.

Relationship between object_status and workflow steps for collections:

      object_status              workflow steps
      ----------------------------------------------------
      draft                      start-deposit

      published_open             submit --> approve --> start-assembly

      published_closed           approve OR start-assembly
      ----------------------------------------------------

      Notes:

      - The first time a collection is opened, it automatically advances
        through a few workflow steps.

      - Whether the collection advances all the way to start-assembly or just
        to approve is controlled by configuration.

      - After that, the collection manager can toggle the collection between
        open and closed states, but the collection cannot be unpublished
        and the workflow steps do not move backward.

Relationship between object_status and workflow steps for items:

      object_status              workflow steps
      ----------------------------------------------------
      draft                      start-deposit
      published                  submit --> approve --> start-assembly
      ----------------------------------------------------

      Notes:

      - For collections that do not require review of items, the object
        goes directly from draft to published status and advances through
        several workflow steps.

      object_status              workflow steps
      ----------------------------------------------------
      draft                      start-deposit
      awaiting_approval          submit
      returned                   submit
      published                  approve --> start-assembly
      ----------------------------------------------------

      Notes:

      - Items can toggle back and forth between awaiting_approval and returned
        during the edit-and-review process. During that time, the workflow
        remains at the submit step.
