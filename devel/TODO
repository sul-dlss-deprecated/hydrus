--------
Integration with DOR
--------

Set up the listener scripts to update the Hydrus SOLR when Hydrus objects are
updated outside of the Hydrus app. See the argo/bin directory for the latest
copies of the scripts.

Figure out why the publish robot in test does not actually publish items to the
purl page. RightsMetadata issue?

--------
MH: current work
--------

Model refactoring: rewrite publish, approve, etc. as discrete and correctly
named methods, each with the appropriate is_* guard at the outset of each
method. Raise an exception if the is_* test fails.

  - Refactor the Item model.

    publish_directly
    
      - test: is_publishable
      - Needed actions:
        self.submit_time=
        complete_workflow_step('submit')
        do_publish

    submit_for_approval
    
      - test: can_be_submitted_for_approval
      - Needed actions:
        self.object_status=
        self.submit_time=
        complete_workflow_step('submit')
        events.add_event

    approve

      - test: is_approvable
      - Needed actions:
        hydrusProperties.remove_nodes(:disapproval_reason)
        events.add_event: Approved
        do_publish

    disapprove
    
      -test: is_disapprovable
      - Needed actions:
        self.object_status = 'returned'
        self.disapproval_reason = reason
        events.add_event
        send email

    resubmit
    
      - test: is_resubmittable
      - Needed actions:
        events.add_event
        hydrusProperties.remove_nodes(:disapproval_reason)
        self.object_status = 'awaiting_approval'

    do_publish

      - Needed actions:
        refresh titles/labels
        complete_workflow_step('approve')
        self.object_status = 'published'
        events.add_event: Published
        start_common_assembly()

  - Modify Item controller and view to agree with new model.

    - Button renaming.

  - GenericObject.save. Should this have an is_* test?

Controller refactor: dispatch to particular actions (open, close,
submit_for_approval, etc.) rather than to the general-purpose update(). In
addition, guard those controller methods with relevant can() calls.

  - Collection:

    - Modify forms, controller, and routing to use specific methods
      rather than update().

    - Delete publish=().

    - Add can() calls.

  - Item:

    - Modify forms, controller, and routing to use specific methods
      rather than update().

    - Delete approve=() and analogous methods.

    - Add can() calls.

Integration tests for role-protection: Collection: open, close, discard, add
item. Item: submit, approve, return.

Allow collections to be opened without being published. Assess.

--------
Other
--------

Should submit_for_approval() and resubmit() send email messages?

After finishing more thorough UI rework, look at: responsiveness issues;
accessibility issues.

Update search results page; UI redesign degraded formatting of it.

Update SUL-chrome gem to latest Bootstrap (needed to be able to use the
unchecked checkbox icon, which is not available in our current SUL-chrome gem).
When this is done, change "icon-minus" to "icon-check-empty" in the
select_status_checkbox_icon helper method (application_helper.rb).

Item View page: Fix conditional display of metadata sections when only some
required fields have been saved.

Fix embargo date UI datepicker not being reselected when an invalid date is
entered and a validation error occurs.

Refactor and write tests for redirect_if_not_correct_object_type: seems more
complex than it needs to be. Also, the code probably won't run as written
because the APO class does not have an object_type method (that might be a
problem as well).

Disable edit tab for published items. NOTE: this already happens automatically
when not in development mode.

After a collection has been published, is it editable? If so, do we need
to push it through the accessioning pipeline again?

Refactor purl_page_ready() to use workflow_ds_extension.

Move tests for workflow_ds_extension out of gen_obj_spec and into its own spec.

Stub out workflow calls in unit and integration tests that create objects with
the "fake" PID, so that we don't run into random test failures. Step 1:
identify methods that advance the workflow (publish and its cousins). Step 2:
identify tests that invoke those methods in a non-druid-minting context.

rightsMD: Refactor to take better advantage of OM and generic_ds.rb.

Redirect unauthenticated users back to the page they were trying to view after
logging in.

Consider moving the actual collection-depositor roleMD info from the APO to
the Collection, for two reasons: (1) it parallels the roleMD stored in the
Item; (2) without it, we don't have access to the collection depositor
during search results (at least not without mucking with the to_solr method).

Collection Items page: Type column is temporarily commented out. Add back when
we distinguish between different item types.

Support item delete action.

Gryphondor for Hydrus objects.

Convert any unit tests that require jetty to be running to use stubbed/mocked
objects so we don't have a dependency on real objects for unit tests.

Work with Willy to switch local dev environment to use a local workflow service
rather than the workflow service on sul-lyberservices-dev.

Should the hydrus app be logging more systematically?

Dashboard: implement hyperlinks to items-by-status. For example, "3 published"
should be a hyperlink to the 3 published items for the applicable collection.

Item view page. The "Test Version" image in the top left corner interferes with
the user's ability to click the Collection hyperlink, especially when the
Collection has a very short title.

Collection/Item create. Rather than starting a new Item/Collection with blank
text boxes, use the approach we have adopted elsewhere for non-required items:
have the user click "Add" button first. Collection: links to related items.
Item: related citations; and links to related items.

Consider moving Hydrus::Responsible into RoleMDDS. Not sure that we need the
module. Also, there is currently some duplication between Hydrus::Responsible
and the to_solr() method in RoleMDDS.

APO RELS-EXT datastream needs to add a child node to <rdf:Description>:
<hydra:referencesAgreement rdf:resource="info:fedora/druid:XXX"/>, where XXX is
the PID of the global Hydrus Agreement object. [The Hydrus agreement object
needs to be created -- need more details].

Collection create: APO.roleMetadata: set the value of <name> for the
collection-manager [waiting on LDAP].

Item view page: the actions box div is called "div.collection-actions".
Is this a problem?

The home page is producing explosive volumes of SOLR logging. This occurs
during the super() call in index() of catalog_controller.rb, which invokes a
Blacklight method that logs the entire SOLR response. A bug has been filed; in
the meantime, you can monkey-patch solr_helper.rb in Blacklight.

File-level licensing.

PURL display of Hydrus objects.

Ability to hide files: individually or for entire object.

Custom terms of use.
