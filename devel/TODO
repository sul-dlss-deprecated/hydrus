--------
UI Redesign
--------

After finishing more thorough UI rework, look at: responsiveness issues;
accessibility issues.

Update search results page; UI redesign degraded formatting of it.

Update SUL-chrome gem to latest Bootstrap (needed to be able to use the
unchecked checkbox icon, which is not available in our current SUL-chrome gem).
When this is done, change "icon-minus" to "icon-check-empty" in the
select_status_checkbox_icon helper method (application_helper.rb).

Item View page: Fix conditional display of metadata sections when only some
required fields have been saved.

Fix embargo date UI datepicker not being reselected when an invalid date is entered and a validation error occurs.

--------
Integration with DOR
--------

Set up the listener scripts to update the Hydrus SOLR when Hydrus objects are
updated outside of the Hydrus app. See the argo/bin directory for the latest
copies of the scripts.

Figure out why the publish robot in test does not actually publish items to the purl page.
RightsMetadata issue?

Update to latest dor-services-gem:
  - update gemfile
  - remove hydrusWF workflow definition from APO
  - Set up WF object (currently oo000oo0099) on test/prod/dev as needed

--------
Misc implementation tasks
--------

Make sure publish(), approve(), etc are guarded at the model and controller
levels, not just at the UI level.
  - Collection.publish(). Refactor into separate open() and close() methods.
    Set titles/labels only during actualy publishing.
  - Model-level: call the relevant is_ method before running the action.
    For example, in publish() call is_publishable() before doing anything.
  - Controller-level: refactor so that each action (publish, open, close,
    approve, etc) is handled by a different controller method rather that by
    the update() method. Then, each of those methods should make the relevant
    can() call to ensure that the user has sufficient powers (this approach
    also requires some routing configuration).

Disable edit tab for published items.

After a collection has been published, is it editable? If so, do we need
to push it through the accessioning pipeline again?

Store Item type in hydrusProp. Currently hardcoded to :dataset. Also see
object_type() in GenericObject.

Refactor purl_page_ready() to use workflow_ds_extension.

Move tests for workflow_ds_extension out of gen_obj_spec and into its own spec.

Stub out workflow calls in unit and integration tests that create objects with
the "fake" PID, so that we don't run into random test failures.

Look into rightsMD: what rightsMD should our objects contain? Refactor to
take better advantage of OM and generic_ds.rb.

Redirect unauthenticated users back to the page they were trying to view after
logging in.

Integration tests for role-protection and gated discovery:
  Collection:
    open collection
    discard collection
    close collection
    add new Item
  Item:
    submit for approval

Search results: display these fields: title; depositor; object type; object
status; date added. [waiting on work to unify handling of object status]

Consider moving the actual collection-depositor roleMD info from the APO to
the Collection, for two reasons: (1) it parallels the roleMD stored in the
Item; (2) without it, we don't have access to the collection depositor
during search results (at least not without mucking with the to_solr method).

Perform server side validation to make sure users are not able to publish or
submit for approval objects that should not be allowed to have this step performed.

Collection Items page: Type column is temporarily commented out. Add back when
we distinguish between different item types.

Move datastreams to a subdirectory, which is conventional in hydra projects.

Support item delete action.

Gryphondor for Hydrus objects.

Check whether roleMetadata have an XML namespace.


****************
WAITING
****************

Convert any unit tests that require jetty to be running to use stubbed/mocked
objects so we don't have a dependency on real objects for unit tests.

Work with Willy to switch local dev environment to use a local workflow service
rather than the workflow service on sul-lyberservices-dev.

Should the hydrus app be logging more systematically?

Dashboard: implement hyperlinks to items-by-status. For example, "3 published"
should be a hyperlink to the 3 published items for the applicable collection.

Item view page. The "Test Version" image in the top left corner interferes with
the user's ability to click the Collection hyperlink, especially when the
Collection has a very short title.

Collection/Item create. Rather than starting a new Item/Collection with blank
text boxes, use the approach we have adopted elsewhere for non-required items:
have the user click "Add" button first. Collection: links to related items.
Item: related citations; and links to related items.

Consider moving Hydrus::Responsible into RoleMDDS. Not sure that we need the
module.  Also, there is currently some duplication between Hydrus::Responsible
and the to_solr() method in RoleMDDS.

APO RELS-EXT datastream needs to add a child node to <rdf:Description>:
<hydra:referencesAgreement rdf:resource="info:fedora/druid:XXX"/>, where XXX is
the PID of the global Hydrus Agreement object. [The Hydrus agreement object
needs to be created -- need more details].

Use reified WFs rather than putting them in the APO. (a) Set up WF objects on
-dev. (b) Work with Willy to deploy the feature to -dev.

Collection create: APO.roleMetadata: set the value of <name> for the
collection-manager [waiting on LDAP].

Item view page: the actions box div is called "div.collection-actions".
Is this a problem?

The home page is producing explosive volumes of SOLR logging.  This occurs
during the super() call in index() of catalog_controller.rb, which invokes a
Blacklight method that logs the entire SOLR response. A bug has been filed; in
the meantime, you can monkey-patch solr_helper.rb in Blacklight.


****************
NEW FEATURES
****************

File-level licensing.

Reserving a PURL.

PURL display of Hydrus objects.

Ability to hide files: individually or for entire object.

Custom terms of use.
