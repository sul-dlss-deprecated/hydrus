--------
UI Redesign
--------

After finishing more thorough UI rework, look at: responsive issues;
accessibility issues.

Update search results page; UI redesign degraded formatting of it.

Make date format consistent (YYYY-MM-DD)

Update SUL-chrome gem to latest Bootstrap (needed to be able to use the
unchecked checkbox icon, which is not available in our current SUL-chrome gem).
When this is done, change "icon-minus" to "icon-check-empty" in the
select_status_checkbox_icon helper method (application_helper.rb).

Item View page: Fix conditional display of metadata sections when only some
required fields have been saved.

--------
Integration with DOR
--------

Set up the listener scripts to update the Hydrus SOLR when Hydrus objects are
updated outside of the Hydrus app. See the argo/bin directory for the latest
copies of the scripts.

Figure out why the latest version of dor-services gem does not seem to find the
admin_policy_object returned.  This is a problem since the rights-metadata
robot uses the newer gem.
  ERROR [2012-10-25 16:07:56] (20609)  ::
  #<LyberCore::Exceptions::ItemError: druid:pd270vx4885 - Item error
  caused by #<NoMethodError: undefined method `datastreams' for nil:NilClass>>
  /home/lyberadmin/common-accessioning/shared/bundle/ruby/1.8/gems/dor-services-3.14.5/lib/dor/models/publishable.rb:16
  in `build_rightsMetadata_datastream'

Figure out why the 'accessionWF' workflow initial step 'start-accession' is
marked as 'waiting' instead of 'completed' when the assembly robots are
completed.  This prevents the accessioning robots from running.

Update to latest dor-services-gem:
  - update gemfile
  - remove hydrusWF workflow definition from APO
	- Set up WF object (currently oo000oo0099) on test/prod/dev as needed

--------
Misc implementation tasks
--------

Redirect unauthenticated users back to the page they were trying to view after
logging in.

Integration tests for role-protection and gated discovery:
  Collection:
    open collection
    discard collection
    close collection
    add new Item
  Item:
    submit for approval

Unify our handling of object status.

  Test backlog

    Coll.create: check object_status
    Item.create: check object_status
    Coll.publish: check object_status

  refactor

    Collection: refactor publish()
      - Use separately named methods to communicate actual steps: open() and close().
      - Modify UI controls accordingly.
      - Set titles/labels only during actualy publishing.

    Item: similar refactor of publish().

  Implementation plan:

    -- Tap into complete_workflow_step(), and modify hydrusProperties as well.

        app/models/hydrus/item.rb
          submit

        app/models/hydrus/generic_object.rb
          approve
          start-assembly

        spec/models/hydrus/collection_spec.rb
        spec/models/hydrus/generic_object_spec.rb
        spec/models/hydrus/item_spec.rb

    -- Change disapprove and resubmit to modify hydrusProperties as well.

    -- Create object_status() method to check hydrusProperties.

    -- Convert workflow_step_is_done() calls to use object_status() instead.

  Relevant methods

      Hydrus::Publishable

      collection
        def is_destroyable
        def publish           # open/close
        def is_open

      generic_object
        def is_approvable
        def is_destroyable
        def is_published
        def is_submitted
        def is_submitted_for_approval
        def is_approved
        def publish=
        def approve=
        def resubmit=
        def approve
        def do_approve
        def do_disapprove
        def is_disapproved
        def complete_workflow_step
        def submit_time
        def deposit_time
        def publish_lifecycle_time

      item
        def resubmit
        def publish
        def collection_is_open

  1. For all app logic, refer to hydrusProperties, not workflow,
     to determine object state. Unlike workflow, these steps
     are not one-way: the object can toggle back and forth
     between awaiting_approval and returned.

        # Item
        draft
        awaiting_approval
        returned
        published

        # Collection.
        draft
        published_open
        published_closed

  2. As the object advances through the process, we will advance
     the workflow (as we are currently doing), but the app will
     never consult the workflow XML for any information about state.
     The workflow states will remain as they are now. In effect,
     workflow XML is write (or advance), but never read.

        start-deposit
        submit
        approve
        start-assembly

  3. Get rid of the to_solr codee in WorkflowDsExtension. Instead
     we need to make sure that hydrusProperties is solrized as needed.
     
Search results: display these fields: title; depositor; object type; object
status; date added. [waiting on work to unify handling of object status]

Consider moving the actual collection-depositor roleMD info from the APO to
the Collection, for two reasons: (1) it parallels the roleMD stored in the
Item; (2) without it, we don't have access to the collection depositor
during search results (at least not without mucking with the to_solr method).

rightsMD: (a) tests; (b) refactor to take advantage of OM and generic_ds.rb.

Perform server side validation to make sure users are not able to publish or 
submit for approval objects that should not be allowed to have this step performed.

Collection Items page: Type column is temporarily commented out. Add back when
we distinguish between different item types.

Move datastreams to a subdirectory, which is conventional in hydra projects.

****************
WAITING
****************

Convert any unit tests that require jetty to be running to use stubbed/mocked
objects so we don't have a dependency on real objects for unit tests.


Work with Willy to switch local dev environment to use a local workflow service
rather than the workflow service on sul-lyberservices-dev.

Should the hydrus app be logging more systematically?

Dashboard: implement hyperlinks to items-by-status. For example, "3 published"
should be a hyperlink to the 3 published items for the applicable collection.

Item view page. The "Test Version" image in the top left corner interferes with
the user's ability to click the Collection hyperlink, especially when the
Collection has a very short title.

Collection/Item create. Rather than starting a new Item/Collection with blank
text boxes, use the approach we have adopted elsewhere for non-required items:
have the user click "Add" button first. Collection: links to related items.
Item: related citations; and links to related items.

Consider moving Hydrus::Responsible into RoleMDDS. Not sure that we need the
module.  Also, there is currently some duplication between Hydrus::Responsible
and the to_solr() method in RoleMDDS.

Need a place to store Item types. Currently hardcoded to :dataset. Also see
object_type() in GenericObject. [Lynn and Hannah will discuss]

APO RELS-EXT datastream needs to add a child node to <rdf:Description>:
<hydra:referencesAgreement rdf:resource="info:fedora/druid:XXX"/>, where XXX is
the PID of the global Hydrus Agreement object. [The Hydrus agreement object
needs to be created -- need more details].

Use reified WFs rather than putting them in the APO. (a) Set up WF objects on
-dev. (b) Work with Willy to deploy the feature to -dev.

Collection create: APO.roleMetadata: set the value of <name> for the
collection-manager [waiting on LDAP].

Collection create: APO.descMetadata. Flesh out. [waiting on spec from Lynn]

Should roleMetadata have an XML namespace? If so, what should it be? Could not
find any definitive examples in Consul. [waiting on response from Lynn]

Item view page: the actions box div is called "div.collection-actions".
[Postpone this until we have GG's new design for sidebar, etc.]

The home page is producing explosive volumes of SOLR logging.  This occurs
during the super() call in index() of catalog_controller.rb, which invokes a
Blacklight method that logs the entire SOLR response. A bug has been filed; in
the meantime, you can monkey-patch solr_helper.rb in Blacklight.
