------------------
Development Tasks - December
------------------

System integration. [Waiting: details below.]

Embargo, visbility, and license: assess integration tests. If needed write some
good integration test scenarios for these attributes.

Tighten access restrictions to the HydrusSolrController. These guarded by
Tomcat rules in our Puppet manifest: replace su_admin_nets with $foz_all_nets.

--------
System integration
--------

Remove n_hydrus_related_items after dor-services gem fixes bug in describable.rb.

Hydrus objects end up with 2 values for submitted_dt and published_dt in their
SOLR documents, because two WFs are using the those lifecycles. [Still not
fixed as of 12/4. For example, these objects have two published lifecycles,
because the disseminationWF if still using the published lifecycle and should
not: bf398rg3493, zt788zg9203.]

Create object mc322hh4254 (hydra:referencesAgreement) on hydrus-dev,
hydrus-test, and hydrus-prod. [Hannah/Lynn]

Remove predicate mapping hack from admin_policy_object.rb. [Waiting on edit to
dor-services gem.]

Try to use hydrus-prod. [Waiting on new dor-services gem in production.]

Set up Camel to send messages to hydrus-prod. [Waiting until we start running
the app on hydrus-prod.]

--------
Other
--------

Refactor Collection.accept_terms_of_deposit to move XML logic down to the
datastream [see notes in method].

Assess the app's slow performance. For example, this command seems too slow,
since it involves no UI or Rubydora transactions: `rails runner
devel/create_test_item.rb batch`.

Update to Rubydora 0.6.0, which might speed up integration tests. [We are
blocked by active-fedora gem restriction to to 0.5.x series. Chris might be
looking into this.]

Remove all code that puts WF into the APO. Search for workflow_steps.

Rake task to list all Hydrus pids, along with their has_model_s value.

Create a view for hydrus admin users to list all collections, regardless of
roleMD.

rightsMD: <access> blocks should include <none/> to indicate no access.

XML formatting issues: (1) MODS elements should be in the default order of the
MODS spec. (2) Save the XML in some consistent pretty-print form. (3) No
useless empty elements. We attempted to make some improvement to descMetadata
using the beautify_datastream() and add_hydrus_next_sibling_node() methods;
however, the former method led to some strange behavior (for example, note the
failure of `rails runner devel/create_test_item.rb batch co i`). Further
progress probably requires some planning/discussion. The existing hydra-OM
stack does not make it easy to address all of the concerns. We should to decide
the most practical place to implement such behavior -- in every application or
in a single XML-cleanup gem that all applications could invoke.

Embargo, visibility, and license for draft Items under scenarios when the
collection's policies are changed from varies to fixed. Current app behavior:
if the collection allows "varies", the edit UI offers widgets; otherwise, the
Item view/edit pages display the current value for the Item. The problem
scenario: if Collection changes from varies to fixed, its unpublished items
will be "stuck" at their current value -- which might or might not agree with
the new fixed value set by the collection manager.

Move Terms of Deposit acceptance pop-up so it shows (if needed) when an item is
created.

Assess allowing collections to be opened without being published. In effect,
this would be an open, draft Collection.

After a collection has been published, is it editable? If so, do we need to
push it through the accessioning pipeline again?

Gryphondor for Hydrus objects.

Should submit_for_approval() and resubmit() send email messages?

After finishing more thorough UI rework, look at: responsiveness issues;
accessibility issues.

Update search results page; UI redesign degraded formatting of it.

Update SUL-chrome gem to latest Bootstrap (needed to be able to use the
unchecked checkbox icon, which is not available in our current SUL-chrome gem).
When this is done, change "icon-minus" to "icon-check-empty" in the
select_status_checkbox_icon helper method (application_helper.rb).

Refactor and write tests for redirect_if_not_correct_object_type: seems more
complex than it needs to be.

Disable edit tab for published items. NOTE: this already happens automatically
when not in development mode.

Refactor purl_page_ready() to use workflow_ds_extension. We could ask the PURL
app directly: it returns a 404 (according to Chris J) if you ask for an object
that is not known it its document cache.

Move tests for workflow_ds_extension out of gen_obj_spec and into its own spec.

Stub out workflow calls in unit and integration tests that create objects with
the "fake" PID, so that we don't run into random test failures. Step 1:
identify methods that advance the workflow (publish and its cousins). Step 2:
identify tests that invoke those methods in a non-druid-minting context.

Consider moving the actual collection-depositor roleMD info from the APO to the
Collection, for two reasons: (1) it parallels the roleMD stored in the Item;
(2) without it, we don't have access to the collection depositor during search
results (at least not without mucking with the to_solr method).

Collection Items page: Type column is temporarily commented out. Add back when
we distinguish between different item types.

Work with Willy to switch local dev environment to use a local workflow service
rather than the workflow service on sul-lyberservices-dev.

Should the hydrus app be logging more systematically?

Dashboard: implement hyperlinks to items-by-status. For example, "3 published"
should be a hyperlink to the 3 published items for the applicable collection.

Collection/Item create. Rather than starting a new Item/Collection with blank
text boxes, use the approach we have adopted elsewhere for non-required items:
have the user click "Add" button first. Collection: links to related items.
Item: related citations; and links to related items.

Consider moving Hydrus::Responsible into RoleMDDS. Not sure that we need the
module. Also, there is currently some duplication between Hydrus::Responsible
and the to_solr() method in RoleMDDS.

Collection create: APO.roleMetadata: set the value of <name> for the
collection-manager [waiting on LDAP].

Item view page: the actions box div is called "div.collection-actions". Is
this a problem?

The home page is producing explosive volumes of SOLR logging. This occurs
during the super() call in index() of catalog_controller.rb, which invokes a
Blacklight method that logs the entire SOLR response. A bug has been filed; in
the meantime, you can use the `rake server` task, which filters out most of the
noise.

Deprecation warning: "Hydra::FileAssetsHelper has been moved". We will need
to deal with this before we move to hydra-head v5x.
