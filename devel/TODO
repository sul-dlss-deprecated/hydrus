------------------
Priorities for February
------------------

Edits made to subsequent versions of Hydrus objects are lost during
accessionWF, due to an interaction between accessionWF and sdr robots. [Modify
dor-services to pick the newer: file or datastream. Also, Richard will modify
sdr-ingest-transfer to avoid polluting workarea.]

Hydrus objects are not accessible in Argo, because the hydrus apo for the
object don't have the dlss:developers group in them. The Hydrus APOs need
to end up having the following in their roleMetadata:

  # APO
  <role type="dor-apo-manager">
    <group>
      <identifier type="workgroup">dlss:developers</identifier>
      <identifier type="workgroup">dlss:pmag-staff</identifier>

Object cleanup and remediation in deployed environments. Prod: delete the stray
item (kr880mc3948); remediate the rest. Test: can delete all objects.

HYDRUS-54. Implement restrictions governing what a user is allowed to change in
subsequent versions.

XML changes. [Hannah will supply needed changes.]

Build the background versioner.

------------------
Versioning: waiting
------------------

Deploy and run item through the pipeline.
  - After do_publish() runs on a subsequent version the start-assembly step in
    the hydrusAssemblyWF is still marked as waiting. [Might be fixed: deploy
    and check.]

Remove Dor::Processable from APOs after Jon include the concern at the dor-services
level [Expected soon.]

--------
Other possibilities for February
--------

All displayed datetimes: yyyy-mm-dd hh:mm am|pm (12 hour).

Hydrus has recursive symlinking in is uploads directory. For example: see
uploads/nw/312/yv/4331/nw312yv4331. [Speak with Peter.]

Support user's ability to hide specific files, which has the effect of setting
publish and shelve to false in the content metadata. Offer a "Hide" checkbox
(default unchecked) next to each uploaded file. Also include an info icon with
some help text.

HYDRUS-51. Add support for "corporate" and "conference" Contributor name types.
[See ticket for details.]

HYDRUS-52. Item license selection. See ticket for details. Also include "No
license" as an option for the default value set at the collection level.
[Questions emailed to Hannah; she will clarify the ticket.]

Use and reproduction. See details below.

--------
Use and reproduction
--------

  - Collection edit. Show Stanford default. Offer textbox for additional text.
    Then offer radio button where collection manager decides whether Item
    depositor can edit that additional text.

  - Item edit. Provide text box. If the collection manager wrote additional
    text, the Item text box will be pre-populated with that text (if the
    manager said the Item depositor could edit) or with nothing.

  - Join the three pieces of text (Stanford, Collection, Item) with two line
    breaks.

  - Hannah will supply the default Stanford text. See Consul for
    how to store this info in the rightsMetadata.

--------
Other: blocked, requires discussion, uncertain need, etc.
--------

Migrate functionality from Hydrus to dor-services gem.

Modify purl_page_ready() to indicate if the page is for the prior version -- in
effect, "ready but stale".

The <access> blocks in rightsMetadata should include <none/> to indicate no
access. This is sort of a pain: how important is it?

Dashboard: implement hyperlinks to items-by-status. For example, "3 published"
should be a hyperlink to the 3 published items for the applicable collection.

Embargo, visibility, and license for draft Items under scenarios when the
collection's policies are changed from varies to fixed. Current app behavior:
if the collection allows "varies", the edit UI offers widgets; otherwise, the
Item view/edit pages display the current value for the Item. The problem
scenario: if Collection changes from varies to fixed, its unpublished items
will be "stuck" at their current value -- which might or might not agree with
the new fixed value set by the collection manager.

Move Terms of Deposit acceptance pop-up so it shows (if needed) when an item is
created.

Collection Items page: Type column is temporarily commented out. Add back when
we distinguish between different item types.

Workflow service for local development: get workflow service running locally
rather than using the service on sul-lyberservices-dev.

Search results page: design could use some improvement. In addition, the
page does not provide a link back to the home page.

Assess allowing collections to be opened without being published. In effect,
this would be an open, draft Collection.

Should submit_for_approval() and resubmit() send email messages?

Should the hydrus app be logging more systematically?

Implement the ability for an admin to impersonate another user.

Gryphondor for Hydrus, so that Hydrus objects appear in SearchWorks.
[Gryphondor might be ready to add Hydrus as a project in February.]

Create object mc322hh4254 (hydra:referencesAgreement) on hydrus-dev,
hydrus-test, and hydrus-prod. [Hannah/Lynn]

Collection create: APO.roleMetadata: set the value of <name> for the
collection-manager. [Waiting on LDAP].

Update SUL-chrome gem to latest Bootstrap (needed to be able to use the
unchecked checkbox icon, which is not available in our current SUL-chrome gem).
When this is done, change "icon-minus" to "icon-check-empty" in the
select_status_checkbox_icon helper method (application_helper.rb).

Upgrade to hydra-head 5.0, active-fedora 5.2, OM 1.8, Solrizer 2.0, and
Blacklight 4.0. See github.com/projecthydra/hydra-head/wiki/Migrating-to-5.0.

When we upgrade to Nokogiri 1.5.6 we might encounter some namespace gotchas
when trying to access attributes. [See email from Jon Deering.]

Update Rubydora and incorporate rollback_fixtures() into it. See
spec_helper.rb. [We are blocked by active-fedora gem restriction to to 0.5.x
series. When we ugrade active-fedora, that restriction will disappear.]

Deprecation warning: "Hydra::FileAssetsHelper has been moved". We will need to
deal with this before we move to hydra-head v5x.

The home page is producing explosive volumes of SOLR logging. This occurs
during the super() call in index() of catalog_controller.rb, which invokes a
Blacklight method that logs the entire SOLR response. A bug has been filed; in
the meantime, you can use the `rake server` task, which filters out most of the
noise. [Might be fixed when we upgrade to newer version of the hydra stack.]

XML formatting issues: (1) MODS elements should be in the default order of the
MODS spec. (2) Save the XML in some consistent pretty-print form. (3) No
useless empty elements. We attempted to make some improvement to descMetadata
using the beautify_datastream() and add_hydrus_next_sibling_node() methods;
however, the former method led to some strange behavior (for example, note the
failure of `rails runner devel/create_test_item.rb batch co i`). Further
progress probably requires some planning/discussion. The existing hydra-OM
stack does not make it easy to address all of the concerns, and several DLSS
developers expressed skepticism about the wisdom of the endeavor. If this is
truly a requirement, we should to decide the most practical place to implement
such behavior -- in every application or in a single XML-cleanup gem that all
applications could invoke.

Consider moving the actual collection-depositor roleMD info from the APO to the
Collection, for two reasons: (1) it parallels the roleMD stored in the Item;
(2) without it, we don't have access to the collection depositor during search
results (at least not without mucking with the to_solr method, which we have
done in the roleMD class).

Hydrus needs to skip a step in assemblyWF. Currently we achieve this by
bypassing the reified workflow system and pushing custom XML directly into the
WF service (see start_common_assembly). A better approach would be to have
dor-services and workflow service accept an options hash allowing the caller to
request that particular steps in the workflow be marked as skipped.

Consider adding version_significance() to dor-services gem.

Because it's simpler to run all Hydrus objects through the same pipeline
(assembly then accessioning), because assembly requires the existence of
contentMetadata, and because the accessioning robots will ultimately add a
contentMetadata datastream to all objects, Hydrus Collections and APOs have the
contentMetadata datastream, which might not be officially correct (though it
doesn't really hurt anything). If we care, we need to change assembly,
accesioning, and the Hydrus code that adds the contentMetadata datastream to
Collections and APOs.
