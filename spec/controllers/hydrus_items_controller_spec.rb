require 'spec_helper'

describe HydrusItemsController, :type => :controller do

  # ROUTES and MAPPING.
  describe "Paths Generated by Custom Routes:" do

    it "should map items show correctly" do
      expect({ :get => "/items/abc" }).to route_to(
        :controller => 'hydrus_items',
        :action     => 'show',
        :id         => 'abc')
    end

    it "should map items destroy_value action correctly" do
      expect({ :get => "/items/abc/destroy_value" }).to route_to(
        :controller => 'hydrus_items',
        :action     => 'destroy_value',
        :id         => 'abc')
    end

    it "custom post actions should route correctly" do
      pid = 'abc123'
      actions = %w(
        publish_directly
        submit_for_approval
        approve
        disapprove
        open_new_version
      )
      actions.each do |a|
        h = { :post => "/items/#{a}/#{pid}" }
        expect(h).to route_to(:controller => 'hydrus_items', :action => a, :id => pid)
      end
    end

    it "should have the destroy_hydrus_item_value convenience url" do
      expect(destroy_hydrus_item_value_path("123")).to match(/items\/123\/destroy_value/)
    end

  end

  # SHOW ACTION.
  describe "Show Action", :integration => true do

    it "should redirect when not logged in" do
      @pid = 'druid:oo000oo0001'
      get(:show, :id => @pid)
      expect(response).to redirect_to new_user_session_path
    end

  end

  describe "New Action", :integration => true do

    it "should restrict access to non authed user" do
      sign_in(mock_user)
      get(:new, :collection => "druid:oo000oo0003")
      expect(response).to redirect_to(root_path)
      expect(flash[:alert]).to eq("You are not authorized to access this page.")
    end

    it "should redirect w/ a flash error when no collection has been provided" do
      sign_in(mock_authed_user)
      get :new
      expect(response).to redirect_to(root_path)
      expect(flash[:error]).to match(/You cannot create an item without specifying a collection./)
    end

  end

  describe "Update Action" do

    describe("File upload", :integration => true) do

      before(:all) do
        @pid = "druid:oo000oo0001"
        @file = fixture_file_upload("/../../spec/fixtures/files/fixture.html", "text/html")
      end

      it "should update the file successfully" do
        sign_in(mock_authed_user)
        put :update, :id => @pid, "files" => [@file]
        expect(response).to redirect_to(hydrus_item_path(@pid))
        expect(flash[:notice]).to match(/Your changes have been saved/)
        expect(flash[:notice]).to match(/'fixture.html' uploaded/)
        expect(Hydrus::Item.find(@pid).files.map{|file| file.filename }.include?("fixture.html")).to be_truthy
      end

    end

  end

  describe "Index action" do

    it "should redirect with a flash message when we're not dealing w/ a nested resrouce" do
      get :index
      expect(flash[:alert]).to eq("You need to sign in or sign up before continuing.")
      expect(response).to redirect_to(new_user_session_path)
    end

    describe "as a nested resource of a collection" do

      it "should return the collection requested via the hydrus_collection_id parameter and assign it to the fobj instance variable" do
        
        sign_in(mock_authed_user)
        mock_coll = double("HydrusCollection")
        expect(mock_coll).to receive(:"current_user=")
        expect(mock_coll).to receive(:items_list)
        allow(Hydrus::Collection).to receive(:find).and_return(mock_coll)
        controller.current_ability.can :read, mock_coll
        get :index, :hydrus_collection_id=>"1234"
        expect(response).to be_success
        expect(assigns(:fobj)).to eq(mock_coll)
      end

      it "should restrict access to authorized users" do
        sign_in(mock_user)
        allow(Hydrus::Collection).to receive(:find).and_return(double("", :current_user= => nil))
        get :index, :hydrus_collection_id => "12345"
        expect(flash[:alert]).to eq("You are not authorized to access this page.")
        expect(response).to redirect_to(root_path)
      end

    end

  end

  describe "custom actions: publish_directly, et al", :integration => true do

    it "should raise exception if user lacks required permissions" do
      pid = "druid:oo000oo0001"
      err_msg = /\ACannot perform action:/
      sign_in(mock_user)
      actions = [
        :publish_directly,
        :submit_for_approval,
        :approve,
        :disapprove,
        :resubmit,
        :open_new_version,
      ]
      actions.each do |action|
        post(action, :id => pid)
        expect(flash[:alert]).to eq("You are not authorized to access this page.")
        expect(response).to redirect_to(root_path)
      end
    end

  end

end
