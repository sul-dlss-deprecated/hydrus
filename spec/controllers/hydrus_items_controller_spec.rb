# -*- encoding : utf-8 -*-
require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')

describe HydrusItemsController do

  # ROUTES and MAPPING.
  describe "Paths Generated by Custom Routes:" do

    it "should map items show correctly" do
      { :get => "/items/abc" }.should route_to(
        :controller => 'hydrus_items', 
        :action     => 'show', 
        :id         => 'abc')
    end

  end

  # SHOW ACTION.
  describe "show action" do

    pid = 'druid:oo000oo0001'

    it "should get fedora document and assign various attributes", :integration => true do
      controller.stub(:current_user).and_return(mock_user)
      get :show, :id => pid
      assigns[:document_fedora].should be_nil
      response.should redirect_to new_user_session_path
    end
  end

  describe "new" do
    it "should do something" do
      controller.stub(:current_user).and_return(mock_user)
      get :new, :collection => "druid:oo000oo0003"
      response.should redirect_to edit_hydrus_collection_path("druid:oo000oo0003")
      flash[:error].should == "You do not have sufficient privileges to edit this document. You have been redirected to the read-only view."
    end
    it "should redirect w/ a flash error when no collection has been provided" do
      controller.stub(:current_user).and_return(mock_authed_user)
      get :new
      response.should redirect_to(root_path)
      flash[:error].should =~ /You cannot create an item without specifying a collection./
    end
  end

  describe "update" do
    describe "file upload" do
      before(:all) do
        @pid = "druid:oo000oo0001"
        @file = fixture_file_upload("/../../spec/fixtures/files/fixture.html", "text/html")
      end
      it "should update the file successfully" do
        controller.stub(:current_user).and_return(mock_authed_user)
        put :update, :id => @pid, "files" => [@file]
        response.should redirect_to(hydrus_item_path(@pid))
        flash[:notice].should =~ /Your changes have been saved/
        flash[:notice].should =~ /'fixture.html' uploaded/
        Hydrus::Item.find(@pid).files.map{|file| file.filename }.include?("fixture.html").should be_true
      end
    end
  end

end
